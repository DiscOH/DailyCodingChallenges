Complete the pattern

input: string(very long long long int)
output: int(string(pattern)) % int(very large n)

note: n will exceed 2^16; example: 10^9 + 7

The pattern is the number in string representation after completing both parts of the algorithm.

% == modulus
modulus: computes the remainder after dividing by an integer

example: 13 % 5 == 3 ; 12 divided by 5 is 2, with 3 leftover. 
The modulus is 3. 
We say: 13 mod 5 is 3.

At step n = 0, start with the string representation of the number 1.
At each step, we will increment the number by 1.

The first part of the algorithm converts the number into a series of str(numbers). 
The second part of the algorithm converts the series of string numbers into a descriptive pattern.  

Example

n=0, '1', '11'.  You have one instance of the number 1, so you output that as one one. '11'
n=1, '11', '21'. You have two instances of the number 1, so you output that as two one.  '21'
n=2, '21', '1211' One two followed by one one. '12 11'
n=3, '1211' One one, followed by one two, followed by two ones. '11 12 21'
n=4, '111221' Three ones, followed by two twos, followed by one one.  '31 22 11'
n=5, '312211' One three, one one, two twos, and two one's. '13 11 22 21'

Your goal is to compute the nth step of the pattern.
